
Part9.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
ydirectionFlag: .word 1    // 1 for down, -1 for up

.global _start
_start:
# Fill back buffer1 memory locations with the colour red
 ldr  r2, =black
   0:	000003fe 	.word	0x000003fe

00000004 <yBitMask>:
   4:	0003fc00 	.word	0x0003fc00

00000008 <xBitMax>:
   8:	00000230 	.word	0x00000230

0000000c <yBitMax>:
   c:	00037000 	.word	0x00037000

00000010 <rectanglePosition>:
  10:	c101e12c 	.word	0xc101e12c

00000014 <directionFlag>:
  14:	00000001 	.word	0x00000001

00000018 <ydirectionFlag>:
  18:	00000001 	.word	0x00000001

0000001c <_start>:
  1c:	e3a02000 	mov	r2, #0
 ldr  r3, =VGA_Back_Buffer1
  20:	e3a034c1 	mov	r3, #-1056964608	; 0xc1000000
 ldr  r4, =VGA_End_Back1
  24:	e59f421c 	ldr	r4, [pc, #540]	; 248 <swapcheck2+0x10>

 b skipOverDraws
  28:	ea00003a 	b	118 <skipOverDraws>

0000002c <drawBackground1>:
# counter to increment through each back buffer1 memory location until 256k locations have been filled with red Pixel value
drawBackground1:
  mov  r5, #0
  2c:	e3a05000 	mov	r5, #0

00000030 <count1y>:
 count1y:
  
  mov  r5, #0x140
  30:	e3a05d05 	mov	r5, #320	; 0x140

00000034 <count1x>:
 count1x: 
  strh r2, [r3], #2
  34:	e0c320b2 	strh	r2, [r3], #2
  sub  r5, #1
  38:	e2455001 	sub	r5, r5, #1
  cmp  r5, #0
  3c:	e3550000 	cmp	r5, #0
  bne  count1x
  40:	1afffffb 	bne	34 <count1x>
  cmp  r3, r4
  44:	e1530004 	cmp	r3, r4
  beq  hax1              //Skip over extra pixel if we are at the limit
  48:	0a000001 	beq	54 <hax1>
  strh r2, [r3]
  4c:	e1c320b0 	strh	r2, [r3]
  add  r3, #0x180
  50:	e2833d06 	add	r3, r3, #384	; 0x180

00000054 <hax1>:
  hax1:
  cmp  r3, r4
  54:	e1530004 	cmp	r3, r4
  ble  count1y
  58:	dafffff4 	ble	30 <count1y>
  bx lr
  5c:	e12fff1e 	bx	lr

  ldr  r3, =VGA_Back_Buffer_Start
  60:	e59f31e4 	ldr	r3, [pc, #484]	; 24c <swapcheck2+0x14>

00000064 <drawRectangle1>:

 drawRectangle1:
  //Color selection and positioning
  ldr  r2, =blue
  64:	e3a0201f 	mov	r2, #31
  //Size vertical of rectangle
  mov  r6, #20
  68:	e3a06014 	mov	r6, #20
  mov  r5, #0
  6c:	e3a05000 	mov	r5, #0

00000070 <countLiney1>:

  countLiney1:
  mov  r5, #0x28 //Size horizontal of rectangle
  70:	e3a05028 	mov	r5, #40	; 0x28

00000074 <countLinex1>:
  countLinex1:
  strh r2, [r3], #2
  74:	e0c320b2 	strh	r2, [r3], #2
  sub  r5, #1
  78:	e2455001 	sub	r5, r5, #1
  cmp  r5, #0
  7c:	e3550000 	cmp	r5, #0
  bne  countLinex1
  80:	1afffffb 	bne	74 <countLinex1>
  sub  r6, r6, #1
  84:	e2466001 	sub	r6, r6, #1
  cmp  r6, #0
  88:	e3560000 	cmp	r6, #0
  add  r3, r3, #0xB0
  8c:	e28330b0 	add	r3, r3, #176	; 0xb0
  add  r3, r3, #0x300
  90:	e2833c03 	add	r3, r3, #768	; 0x300
  bne  countLiney1
  94:	1afffff5 	bne	70 <countLiney1>
  bx lr
  98:	e12fff1e 	bx	lr

# Fill back buffer2 memory locations with the colour green

 ldr r2, =black
  9c:	e3a02000 	mov	r2, #0
 ldr r3, =VGA_Back_Buffer2
  a0:	e3a034c2 	mov	r3, #-1040187392	; 0xc2000000
 ldr r4, =VGA_End_Back2
  a4:	e59f41a4 	ldr	r4, [pc, #420]	; 250 <swapcheck2+0x18>

000000a8 <drawBackground2>:

# counter to increment through each back buffer2 memory location until 256k locations have been filled with green Pixel value
drawBackground2:
  mov  r5, #0
  a8:	e3a05000 	mov	r5, #0

000000ac <count2y>:
 count2y:
  
  mov  r5, #0x140
  ac:	e3a05d05 	mov	r5, #320	; 0x140

000000b0 <count2x>:
 count2x: 
  strh r2, [r3], #2
  b0:	e0c320b2 	strh	r2, [r3], #2
  sub  r5, #1
  b4:	e2455001 	sub	r5, r5, #1
  cmp  r5, #0
  b8:	e3550000 	cmp	r5, #0
  bne  count2x
  bc:	1afffffb 	bne	b0 <count2x>
  cmp  r3, r4
  c0:	e1530004 	cmp	r3, r4
  beq  hax2              //Skip over extra pixel if we are at the limit
  c4:	0a000001 	beq	d0 <hax2>
  strh r2, [r3]
  c8:	e1c320b0 	strh	r2, [r3]
  add  r3, #0x180
  cc:	e2833d06 	add	r3, r3, #384	; 0x180

000000d0 <hax2>:
  hax2:
  cmp  r3, r4
  d0:	e1530004 	cmp	r3, r4
  ble  count2y
  d4:	dafffff4 	ble	ac <count2y>
  bx lr
  d8:	e12fff1e 	bx	lr

  ldr  r3, =VGA_Back_Buffer_Start
  dc:	e59f3168 	ldr	r3, [pc, #360]	; 24c <swapcheck2+0x14>

000000e0 <drawRectangle2>:

 drawRectangle2:
  //Color selection
  ldr  r2, =blue
  e0:	e3a0201f 	mov	r2, #31
  //Size vertical of rectangle
  mov  r6, #20
  e4:	e3a06014 	mov	r6, #20
  mov  r5, #0
  e8:	e3a05000 	mov	r5, #0

000000ec <countLiney2>:

  countLiney2:
  mov  r5, #0x28 //Size horizontal of rectangle
  ec:	e3a05028 	mov	r5, #40	; 0x28

000000f0 <countLinex2>:
  countLinex2:
  strh r2, [r3], #2
  f0:	e0c320b2 	strh	r2, [r3], #2
  sub  r5, #1
  f4:	e2455001 	sub	r5, r5, #1
  cmp  r5, #0
  f8:	e3550000 	cmp	r5, #0
  bne  countLinex2
  fc:	1afffffb 	bne	f0 <countLinex2>
  sub  r6, r6, #1
 100:	e2466001 	sub	r6, r6, #1
  cmp  r6, #0
 104:	e3560000 	cmp	r6, #0
  add  r3, r3, #0xB0
 108:	e28330b0 	add	r3, r3, #176	; 0xb0
  add  r3, r3, #0x300
 10c:	e2833c03 	add	r3, r3, #768	; 0x300
  bne  countLiney2
 110:	1afffff5 	bne	ec <countLiney2>
  bx lr
 114:	e12fff1e 	bx	lr

00000118 <skipOverDraws>:

skipOverDraws:
#  load pointer for back Buffer1

  ldr r5, =ADDR_Front_Buffer
 118:	e59f5134 	ldr	r5, [pc, #308]	; 254 <swapcheck2+0x1c>
  ldr r3, =VGA_Back_Buffer1
 11c:	e3a034c1 	mov	r3, #-1056964608	; 0xc1000000
  str r3, [r5, #4] 	// set pointer location of back buffer1
 120:	e5853004 	str	r3, [r5, #4]
  mov r6, #1
 124:	e3a06001 	mov	r6, #1
  str r6, [r5]          //  enable double buffering
 128:	e5856000 	str	r6, [r5]

0000012c <swapcheck>:

# Make sure status bit goes low. This indicates the pointers are properly set

 swapcheck:
  ldr  r3,[r5, #12]
 12c:	e595300c 	ldr	r3, [r5, #12]
  ands r3,r3, r6
 130:	e0133006 	ands	r3, r3, r6
  bne  swapcheck
 134:	1afffffc 	bne	12c <swapcheck>

#  load pointer for back Buffer2

  ldr r3, =VGA_Back_Buffer2
 138:	e3a034c2 	mov	r3, #-1040187392	; 0xc2000000
  str r3, [r5, #4] 	//  set start location of Back Buffer2
 13c:	e5853004 	str	r3, [r5, #4]


# load slider switch value  

  ldr r0, =ADDR_Video_Timer
 140:	e59f0110 	ldr	r0, [pc, #272]	; 258 <swapcheck2+0x20>
  mov r8, #1
 144:	e3a08001 	mov	r8, #1

00000148 <reDraw>:
reDraw:
  // Draw to Buffer1
  ldr r2, =black
 148:	e3a02000 	mov	r2, #0
  ldr r3, =VGA_Back_Buffer1
 14c:	e3a034c1 	mov	r3, #-1056964608	; 0xc1000000
  ldr r4, =VGA_End_Back1
 150:	e59f40f0 	ldr	r4, [pc, #240]	; 248 <swapcheck2+0x10>
  bl drawBackground1         // Draw background first
 154:	ebffffb4 	bl	2c <drawBackground1>
  ldr r5, =rectanglePosition
 158:	e59f50fc 	ldr	r5, [pc, #252]	; 25c <swapcheck2+0x24>
  ldr r3, [r5]              // Load rectangle position
 15c:	e5953000 	ldr	r3, [r5]
  bl drawRectangle1         // Draw rectangle (without automatic movement)
 160:	ebffffbf 	bl	64 <drawRectangle1>

00000164 <check>:

check:
  ldr r1, [r0]              // Load pushbutton value
 164:	e5901000 	ldr	r1, [r0]
  and r1, r1, #1            // Mask for KEY3 (bit 3)
 168:	e2011001 	and	r1, r1, #1
  cmp r1, r8                // Compare with previous state
 16c:	e1510008 	cmp	r1, r8
  beq check                 // If same, keep checking
 170:	0afffffb 	beq	164 <check>
  
  ldr r5, =rectanglePosition
 174:	e59f50e0 	ldr	r5, [pc, #224]	; 25c <swapcheck2+0x24>
  ldr r3, [r5]              // Load current position
 178:	e5953000 	ldr	r3, [r5]
  
  // Load direction flag
  ldr r11, =directionFlag
 17c:	e59fb0dc 	ldr	r11, [pc, #220]	; 260 <swapcheck2+0x28>
  ldr r12, [r11]
 180:	e59bc000 	ldr	r12, [r11]
  
  // Check boundaries
  ldr r6, =xBitMax          // Load address of xBitMax
 184:	e59f60d8 	ldr	r6, [pc, #216]	; 264 <swapcheck2+0x2c>
  ldr r6, [r6]              // Load the actual value
 188:	e5966000 	ldr	r6, [r6]
  ldr r7, =xBitMask
 18c:	e59f70d4 	ldr	r7, [pc, #212]	; 268 <swapcheck2+0x30>
  ldr r7, [r7]
 190:	e5977000 	ldr	r7, [r7]
  and r7, r3, r7           // Get current x position
 194:	e0037007 	and	r7, r3, r7
  
  // Check if at right edge
  cmp r7, r6
 198:	e1570006 	cmp	r7, r6
  blt not_at_right
 19c:	ba000002 	blt	1ac <not_at_right>
  mov r12, #-1             // Change direction to left
 1a0:	e3e0c000 	mvn	r12, #0
  str r12, [r11]
 1a4:	e58bc000 	str	r12, [r11]
  b apply_xmovement
 1a8:	ea000003 	b	1bc <apply_xmovement>

000001ac <not_at_right>:
  
not_at_right:
  // Check if at left edge (x = 0)
  cmp r7, #0
 1ac:	e3570000 	cmp	r7, #0
  bgt apply_xmovement
 1b0:	ca000001 	bgt	1bc <apply_xmovement>
  mov r12, #1              // Change direction to right
 1b4:	e3a0c001 	mov	r12, #1
  str r12, [r11]
 1b8:	e58bc000 	str	r12, [r11]

000001bc <apply_xmovement>:
  
apply_xmovement:
  // Move based on direction (r12 contains direction)
  add r3, r3, r12, LSL #1  // Multiply direction by 2 for pixel movement
 1bc:	e083308c 	add	r3, r3, r12, lsl #1
  str r3, [r5]             // Store new position
 1c0:	e5853000 	str	r3, [r5]
  mov r8, r1               // Update previous state
 1c4:	e1a08001 	mov	r8, r1
  
  // Load direction flag
  ldr r11, =ydirectionFlag
 1c8:	e59fb09c 	ldr	r11, [pc, #156]	; 26c <swapcheck2+0x34>
  ldr r12, [r11]
 1cc:	e59bc000 	ldr	r12, [r11]
  
  // Check boundaries
  ldr r6, =yBitMax          // Load address of xBitMax
 1d0:	e59f6098 	ldr	r6, [pc, #152]	; 270 <swapcheck2+0x38>
  ldr r6, [r6]              // Load the actual value
 1d4:	e5966000 	ldr	r6, [r6]
  ldr r7, =yBitMask
 1d8:	e59f7094 	ldr	r7, [pc, #148]	; 274 <swapcheck2+0x3c>
  ldr r7, [r7]
 1dc:	e5977000 	ldr	r7, [r7]
  and r7, r3, r7           // Get current x position
 1e0:	e0037007 	and	r7, r3, r7
  
  // Check if at right edge
  cmp r7, r6
 1e4:	e1570006 	cmp	r7, r6
  blt not_at_bottom
 1e8:	ba000002 	blt	1f8 <not_at_bottom>
  mov r12, #-1             // Change direction to up
 1ec:	e3e0c000 	mvn	r12, #0
  str r12, [r11]
 1f0:	e58bc000 	str	r12, [r11]
  b apply_ymovement
 1f4:	ea000003 	b	208 <apply_ymovement>

000001f8 <not_at_bottom>:
  
not_at_bottom:
  // Check if at left edge (x = 0)
  cmp r7, #0
 1f8:	e3570000 	cmp	r7, #0
  bgt apply_ymovement
 1fc:	ca000001 	bgt	208 <apply_ymovement>
  mov r12, #1              // Change direction to down
 200:	e3a0c001 	mov	r12, #1
  str r12, [r11]
 204:	e58bc000 	str	r12, [r11]

00000208 <apply_ymovement>:
  
apply_ymovement:
  // Move based on direction (r12 contains direction)
  add r3, r3, r12, LSL #10  // Multiply direction by 2 for pixel movement
 208:	e083350c 	add	r3, r3, r12, lsl #10
  str r3, [r5]             // Store new position
 20c:	e5853000 	str	r3, [r5]
  mov r8, r1               // Update previous state
 210:	e1a08001 	mov	r8, r1

  // Draw to Buffer2
  ldr r2, =black
 214:	e3a02000 	mov	r2, #0
  ldr r3, =VGA_Back_Buffer2
 218:	e3a034c2 	mov	r3, #-1040187392	; 0xc2000000
  ldr r4, =VGA_End_Back2
 21c:	e59f402c 	ldr	r4, [pc, #44]	; 250 <swapcheck2+0x18>
  bl drawBackground2         // Draw background first
 220:	ebffffa0 	bl	a8 <drawBackground2>
  ldr r5, =rectanglePosition
 224:	e59f5030 	ldr	r5, [pc, #48]	; 25c <swapcheck2+0x24>
  ldr r3, [r5]
 228:	e5953000 	ldr	r3, [r5]
  bl drawRectangle2         // Draw rectangle (without automatic movement)
 22c:	ebffffab 	bl	e0 <drawRectangle2>
  mov r8, r1      // keep track of  present back buffer
 230:	e1a08001 	mov	r8, r1
  str r10, [r9]    // swap buffer
 234:	e589a000 	str	r10, [r9]

00000238 <swapcheck2>:

# Wait for status bit to go low. This indicates the pointer is properly set

 swapcheck2:
  ldr r1, [r9, #12]   // load status bit
 238:	e599100c 	ldr	r1, [r9, #12]
  ands r1, r1, r10
 23c:	e011100a 	ands	r1, r1, r10
  bne swapcheck2
 240:	1afffffc 	bne	238 <swapcheck2>

  b reDraw
 244:	eaffffbf 	b	148 <reDraw>
 248:	c103c280 	.word	0xc103c280
 24c:	c101e12c 	.word	0xc101e12c
 250:	c203c280 	.word	0xc203c280
 254:	ff203020 	.word	0xff203020
 258:	ff20302c 	.word	0xff20302c
 25c:	00000010 	.word	0x00000010
 260:	00000014 	.word	0x00000014
 264:	00000008 	.word	0x00000008
 268:	00000000 	.word	0x00000000
 26c:	00000018 	.word	0x00000018
 270:	0000000c 	.word	0x0000000c
 274:	00000004 	.word	0x00000004
